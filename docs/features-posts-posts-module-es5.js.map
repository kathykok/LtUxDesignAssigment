{"version":3,"sources":["webpack:///src/app/features/posts/components/post-create/post-create.component.ts","webpack:///src/app/features/posts/components/post-create/post-create.component.html","webpack:///src/app/features/posts/components/post-details/post-details.component.ts","webpack:///src/app/features/posts/components/post-details/post-details.component.html","webpack:///src/app/features/posts/components/post-update/post-update.component.ts","webpack:///src/app/features/posts/components/post-update/post-update.component.html","webpack:///src/app/features/posts/components/posts-list/posts-list.component.ts","webpack:///src/app/features/posts/components/posts-list/posts-list.component.html","webpack:///src/app/features/posts/posts-routing.module.ts","webpack:///src/app/features/posts/posts.component.ts","webpack:///src/app/features/posts/posts.component.html","webpack:///src/app/features/posts/posts.module.ts","webpack:///src/app/features/posts/store/posts.selectors.ts"],"names":["PostCreateComponent","formBuilder","store","notification","postForm","createPostCreateFormGroup","valid","dispatch","post","value","showError","group","date","Date","required","title","body","dirty","onPostFormSubmit","selector","templateUrl","styleUrls","PostDetailsComponent","activatedRoute","params","subscribe","post$","pipe","id","postId","PostUpdateComponent","subscriptions","add","createPostFormGroup","updatePost","controls","changes","unsubscribe","PostsListComponent","posts$","routes","path","component","children","redirectTo","pathMatch","canDeactivate","PostsRoutingModule","forChild","imports","exports","PostsComponent","PostsModule","declarations","getSelectors","selectAll","selectPostsState","selectPosts","selectPostById","postsState","entities"],"mappings":"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","file":"features-posts-posts-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\nimport { Store } from '@ngrx/store'\nimport { PostsState } from '../../store/posts.state'\nimport { createPostsItem } from '../../store/posts.actions'\nimport { NotificationBarService } from '../../../../shared/services/notification-bar.service'\nimport { CanDeactivateComponentModel } from '../../../../shared/models/can-deactivate-component.model'\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.scss'],\n})\nexport class PostCreateComponent implements CanDeactivateComponentModel, OnInit {\n  public postForm: FormGroup\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private store: Store<PostsState>,\n    private notification: NotificationBarService,\n  ) {\n  }\n\n  public ngOnInit(): void {\n    this.postForm = this.createPostCreateFormGroup()\n  }\n\n  public onPostFormSubmit(): void {\n    if (this.postForm.valid) {\n      this.store.dispatch(createPostsItem({post: this.postForm.value}))\n    } else {\n      this.notification.showError('Form contains errors. Fix it and try again.')\n    }\n  }\n\n  private createPostCreateFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      date: [new Date(), Validators.required],\n      title: ['', Validators.required],\n      body: ['', Validators.required],\n    })\n  }\n\n  canDeactivate(): boolean {\n    return !this.postForm.dirty\n  }\n}\n","<div>\n  <app-page-header>\n    <app-page-header-back [link]=\"'/posts/list'\" ariaLabel=\"Back to Posts List\"></app-page-header-back>\n    <app-page-header-title>Post Create</app-page-header-title>\n  </app-page-header>\n\n  <div class=\"page-content\">\n    <div class=\"squeeze\">\n      <mat-card>\n        <form [formGroup]=\"postForm\" (submit)=\"onPostFormSubmit()\">\n          <mat-form-field class=\"w-100\">\n            <mat-label>Choose a date</mat-label>\n            <input matInput [formControlName]=\"'date'\" [matDatepicker]=\"picker\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error *ngIf=\"postForm.get('date').hasError('required')\">\n              Date of Post is required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field class=\"w-100\">\n            <mat-label>Post Title</mat-label>\n            <input matInput #title [formControlName]=\"'title'\" maxlength=\"40\">\n            <mat-error *ngIf=\"postForm.get('title').hasError('required')\">\n              Title of Post is required\n            </mat-error>\n            <mat-hint align=\"end\">{{title.value.length}} / 40</mat-hint>\n          </mat-form-field>\n\n          <mat-form-field class=\"w-100\">\n            <mat-label>Body</mat-label>\n            <textarea matInput [formControlName]=\"'body'\" rows=\"10\"></textarea>\n            <mat-error *ngIf=\"postForm.get('body').hasError('required')\">\n              Body of Post is required\n            </mat-error>\n          </mat-form-field>\n\n          <div class=\"text-right\">\n            <button mat-button [routerLink]=\"['/','posts']\" type=\"button\">Cancel</button>\n            <button mat-flat-button color=\"primary\" type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute, Params } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { PostsState } from '../../store/posts.state'\nimport { select, Store } from '@ngrx/store'\nimport { Post } from '../../models/post.model'\nimport { selectPostById } from '../../store/posts.selectors'\nimport { deletePostsItem, readPostsItem } from '../../store/posts.actions'\nimport { take } from 'rxjs/operators'\n\n@Component({\n  selector: 'app-post-details',\n  templateUrl: './post-details.component.html',\n  styleUrls: ['./post-details.component.scss'],\n})\nexport class PostDetailsComponent implements OnInit {\n  public post$: Observable<Post>\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private store: Store<PostsState>,\n  ) {\n  }\n\n  public ngOnInit(): void {\n    this.activatedRoute.params.subscribe((params: Params) => {\n      this.post$ = this.store.pipe(select(selectPostById(params.id)))\n      this.post$.pipe(take(1)).subscribe(post => !post && this.store.dispatch(readPostsItem({id: params.id})))\n    })\n  }\n\n  public delete(postId) {\n    this.store.dispatch(deletePostsItem({id: postId}))\n  }\n}\n","<div *ngIf=\"post$ | async as post\">\n  <app-page-header>\n    <app-page-header-back [link]=\"'/posts/list'\" ariaLabel=\"Back to Posts List\"></app-page-header-back>\n    <app-page-header-title [addons]=\"post.date | date\">{{post.title}}</app-page-header-title>\n    <button mat-icon-button color=\"primary\" aria-label=\"Edit Post\" [routerLink]=\"['/','posts', post.id, 'update']\" class=\"ml-auto\">\n      <mat-icon>edit</mat-icon>\n    </button>\n    <button mat-icon-button color=\"warn\" aria-label=\"Delete Post\" (click)=\"delete(post.id)\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </app-page-header>\n\n  <div class=\"page-content\">\n    {{post.body}}\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, Params } from '@angular/router'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\nimport { Observable, Subscription } from 'rxjs'\nimport { select, Store } from '@ngrx/store'\nimport { CanDeactivateComponentModel } from '../../../../shared/models/can-deactivate-component.model'\nimport { PostsState } from '../../store/posts.state'\nimport { deletePostsItem, readPostsItem, updatePostsItem } from '../../store/posts.actions'\nimport { Post } from '../../models/post.model'\nimport { selectPostById } from '../../store/posts.selectors'\nimport { NotificationBarService } from '../../../../shared/services/notification-bar.service'\n\n\n@Component({\n  selector: 'app-post-update',\n  templateUrl: './post-update.component.html',\n  styleUrls: ['./post-update.component.scss'],\n})\nexport class PostUpdateComponent implements CanDeactivateComponentModel, OnInit, OnDestroy {\n  public postForm: FormGroup\n  public post$: Observable<Post>\n  private subscriptions: Subscription = new Subscription()\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private store: Store<PostsState>,\n    private notification: NotificationBarService,\n  ) {\n  }\n\n  public ngOnInit(): void {\n    this.activatedRoute.params.subscribe((params: Params) => {\n      this.post$ = this.store.pipe(select(selectPostById(params.id)))\n\n      this.subscriptions.add(\n        this.post$.subscribe(post => {\n          this.postForm = this.createPostFormGroup(post)\n          if (!post) {\n            this.store.dispatch(readPostsItem({id: params.id}))\n          }\n        }),\n      )\n    })\n  }\n\n  public onPostFormSubmit(): void {\n    if (this.postForm.valid) {\n      this.store.dispatch(updatePostsItem({\n        updatePost: {\n          id: this.postForm.controls.id.value,\n          changes: this.postForm.value,\n        },\n      }))\n    } else {\n      this.notification.showError('Form contains errors. Fix it and try again.')\n    }\n  }\n\n  public delete(postId) {\n    this.store.dispatch(deletePostsItem({id: postId}))\n  }\n\n  private createPostFormGroup(post: Post): FormGroup {\n    return this.formBuilder.group({\n      id: [post ? post.id : null, Validators.required],\n      date: [post ? post.date : new Date(), Validators.required],\n      title: [post ? post.title : '', Validators.required],\n      body: [post ? post.body : '', Validators.required],\n    })\n  }\n\n  public canDeactivate(): boolean {\n    return !this.postForm.dirty\n  }\n\n  public ngOnDestroy(): void {\n    this.subscriptions.unsubscribe()\n  }\n}\n","<div *ngIf=\"post$ | async as post\">\n  <app-page-header>\n    <app-page-header-back [link]=\"'/posts/list'\" ariaLabel=\"Back to Posts List\"></app-page-header-back>\n    <app-page-header-title [addons]=\"post.date | date\">{{post.title}}</app-page-header-title>\n    <button mat-icon-button color=\"warn\" aria-label=\"Delete Post\" class=\"ml-auto\" (click)=\"delete(post.id)\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </app-page-header>\n\n  <div class=\"page-content\">\n    <div class=\"squeeze\">\n      <mat-card>\n        <form [formGroup]=\"postForm\" (submit)=\"onPostFormSubmit()\">\n          <mat-form-field class=\"w-100\">\n            <mat-label>Choose a date</mat-label>\n            <input matInput [formControlName]=\"'date'\" [matDatepicker]=\"picker\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error *ngIf=\"postForm.get('date').hasError('required')\">\n              Date of Post is required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field class=\"w-100\">\n            <mat-label>Post Title</mat-label>\n            <input matInput #title [formControlName]=\"'title'\" maxlength=\"40\">\n            <mat-error *ngIf=\"postForm.get('title').hasError('required')\">\n              Title of Post is required\n            </mat-error>\n            <mat-hint align=\"end\">{{title.value.length}} / 40</mat-hint>\n          </mat-form-field>\n\n          <mat-form-field class=\"w-100\">\n            <mat-label>Body</mat-label>\n            <textarea matInput [formControlName]=\"'body'\" rows=\"10\"></textarea>\n            <mat-error *ngIf=\"postForm.get('body').hasError('required')\">\n              Body of Post is required\n            </mat-error>\n          </mat-form-field>\n\n          <div class=\"text-right\">\n            <button mat-button type=\"button\" [routerLink]=\"['/','posts']\">Cancel</button>\n            <button mat-flat-button color=\"primary\" type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { Post } from '../../models/post.model'\nimport { select, Store } from '@ngrx/store'\nimport { PostsState } from '../../store/posts.state'\nimport { readPosts } from '../../store/posts.actions'\nimport { selectPosts } from '../../store/posts.selectors'\n\n@Component({\n  selector: 'app-posts-list',\n  templateUrl: './posts-list.component.html',\n  styleUrls: ['./posts-list.component.scss'],\n})\nexport class PostsListComponent {\n  public posts$: Observable<Post[]>\n\n  constructor(private store: Store<PostsState>) {\n    store.dispatch(readPosts())\n    this.posts$ = this.store.pipe(select(selectPosts))\n  }\n\n  public onRefresh(): void {\n    this.store.dispatch(readPosts())\n  }\n}\n","<div *ngIf=\"posts$ | async as posts\">\n  <app-page-header>\n    <app-page-header-back [link]=\"'/'\" ariaLabel=\"Back to homepage\"></app-page-header-back>\n    <app-page-header-title [addons]=\"posts.length\">Posts List</app-page-header-title>\n    <button mat-icon-button color=\"primary\" aria-label=\"Reload\" class=\"ml-auto\" (click)=\"onRefresh()\">\n      <mat-icon>refresh</mat-icon>\n    </button>\n  </app-page-header>\n\n  <div class=\"floating-action\">\n    <button mat-fab color=\"primary\" aria-label=\"Add new item\" [routerLink]=\"['/','posts','create']\">\n      <mat-icon>add</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"page-content\">\n    <mat-list class=\"pt-0\">\n      <mat-list-item *ngFor=\"let post of posts\" mat-ripple [routerLink]=\"['/','posts', post.id]\">\n        <mat-icon mat-list-icon color=\"accent\">event_note</mat-icon>\n        <div mat-line>{{post.title}}</div>\n        <div mat-line class=\"post-item__date\">{{post.date | date}}</div>\n      </mat-list-item>\n    </mat-list>\n  </div>\n</div>\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\n\nimport { PostsComponent } from './posts.component'\nimport { PostsListComponent } from './components/posts-list/posts-list.component'\nimport { PostCreateComponent } from './components/post-create/post-create.component'\nimport { PostUpdateComponent } from './components/post-update/post-update.component'\nimport { PostDetailsComponent } from './components/post-details/post-details.component'\nimport { UnsavedChangesGuard } from '../../shared/services/unsaved-changes.guard'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PostsComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'list',\n        pathMatch: 'full',\n      },\n      {\n        path: 'list',\n        component: PostsListComponent,\n      },\n      {\n        path: 'create',\n        component: PostCreateComponent,\n        canDeactivate: [UnsavedChangesGuard],\n      },\n      {\n        path: ':id/update',\n        component: PostUpdateComponent,\n        canDeactivate: [UnsavedChangesGuard],\n      },\n      {\n        path: ':id',\n        component: PostDetailsComponent,\n      },\n    ],\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PostsRoutingModule {\n}\n","import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.scss'],\n})\nexport class PostsComponent {\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { PostsRoutingModule } from './posts-routing.module'\nimport { SharedModule } from '../../shared/shared.module'\nimport { PostsComponent } from './posts.component'\nimport { PostsListComponent } from './components/posts-list/posts-list.component'\nimport { PostDetailsComponent } from './components/post-details/post-details.component'\nimport { PostCreateComponent } from './components/post-create/post-create.component'\nimport { PostUpdateComponent } from './components/post-update/post-update.component'\n\n\n@NgModule({\n  declarations: [\n    PostsComponent,\n    PostsListComponent,\n    PostDetailsComponent,\n    PostCreateComponent,\n    PostUpdateComponent,\n  ],\n  imports: [\n    CommonModule,\n    PostsRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class PostsModule {\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store'\nimport { postsAdapter, PostsState } from './posts.state'\n\nconst { selectAll } = postsAdapter.getSelectors()\nconst selectPostsState = createFeatureSelector<PostsState>('posts')\n\nexport const selectPosts = createSelector(\n  selectPostsState,\n  selectAll,\n)\nexport const selectPostById = (postId: string) => createSelector(\n  selectPostsState,\n  postsState => postsState.entities[postId],\n)\n"]}